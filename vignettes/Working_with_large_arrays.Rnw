%\VignetteIndexEntry{Working with large arrays in R}
%\VignetteDepends{Matrix, DelayedArray, HDF5Array, SummarizedExperiment, airway, pryr}

\SweaveOpts{keep.source=TRUE, eps=FALSE, width=9, height=3}

\documentclass[9pt]{beamer}

\mode<presentation> {
\usetheme{Madrid}
\usecolortheme{whale}
}

\usepackage{slides}
\renewcommand\Rclass[1]{{\texttt{#1}\index{#1 (class)}}}

\AtBeginSection[]
{
  \begin{frame}<beamer>
    \tableofcontents[currentsection]
  \end{frame}
}

\title{Working with large arrays in R}

\author{Herv\'e Pag\`es\\
        \href{mailto:hpages@fredhutch.org}{hpages@fredhutch.org}}

\date{July 2017}

\begin{document}

<<setup, echo=FALSE, results=hide>>=
options(width=80)
library(Matrix)
library(DelayedArray)
library(HDF5Array)
library(SummarizedExperiment)
library(airway)
library(pryr)
@

\maketitle

\frame{\tableofcontents}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Motivation and challenges}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]
  R ordinary {\bf matrix} or {\bf array} is not suitable for big datasets:
  \begin{block}{}
    \begin{itemize}
      \item 10x Genomics dataset (single cell experiment):
            30,000 genes x 1.3 million cells = 36.5 billion values
      \item in an ordinary integer matrix ==> 136G in memory!
    \end{itemize}
  \end{block}

  Need for alternative containers:
  \begin{block}{}
    \begin{itemize}
      \item but at the same time, the object should be (almost) as easy to
            manipulate as an ordinary matrix or array
      \item {\em standard R matrix/array API}: \Rcode{dim}, \Rcode{dimnames},
            \Rcode{t}, \Rcode{is.na}, \Rcode{==}, \Rcode{+}, \Rcode{log},
            \Rcode{cbind}, \Rcode{max}, \Rcode{sum}, \Rcode{colSums}, etc...
      \item not limited to 2 dimensions ==> also support arrays of arbitrary
            number of dimensions
    \end{itemize}
  \end{block}

  2 approaches: {\bf in-memory data} vs {\bf on-disk data}
\end{frame}


\begin{frame}[fragile]
  {\bf In-memory data}
  \begin{block}{}
    \begin{itemize}
      \item a 30k x 1.3M matrix might still fit in memory if the data can
            be efficiently compressed
      \item example: sparse data (small percentage of non-zero values) ==>
            {\em sparse representation} (storage of non-zero values only)
      \item example: data with long runs of identical values ==> {\em RLE
            compression (Run Length Encoding)}
      \item choose the {\em best type} to store the values: raw (1 byte) <
            integer (4 bytes) < double (8 bytes)
      \item if using {\em RLE compression}:
            \begin{itemize}
              \item choose the {\em best orientation} to store the values:
                    {\em by row} or {\em by column} (one might give better
                    compression than the other)
              \item store the data by chunk ==> opportunity to pick up
                    {\em best type} and {\em best orientation} on a chunk
                    basis (instead of for the whole data)
            \end{itemize}
      \item size of 30k x 1.3M matrix in memory can be reduced from 136G
            to 16G!
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}[fragile]
  Examples of {\bf in-memory containers}
  \begin{block}{}
    \begin{itemize}
      \item {\bf dgCMatrix} container from the \Biocpkg{Matrix} package:
            \begin{itemize}
              \item sparse matrix representation
              \item type of values: double
            \end{itemize}
      \item {\bf RleArray} and {\bf RleMatrix} containers from the
            \Biocpkg{DelayedArray} package:
            \begin{itemize}
              \item uses RLE compression
              \item arbitrary number of dimensions
              \item type of values: any R atomic type (integer, double,
                    logical, complex, character, and raw)
            \end{itemize}
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}[fragile]
  {\bf On-disk data}
  \begin{block}{}
    \begin{itemize}
      \item if data is too big to fit in memory (even after compression) ==>
            use {\em on-disk representation}
      \item challenge: should still be (almost) as easy to manipulate as
            an ordinary matrix! ({\em standard R matrix/array API})
    \end{itemize}
  \end{block}
\end{frame}

\begin{frame}[fragile]
  Examples of {\bf on-disk containers}
  \begin{block}{}
    \begin{itemize}
      \item Direct manipulation of an {\bf HDF5 dataset} via the
            \Biocpkg{rhdf5} API. Low level API!
      \item {\bf HDF5Array} and {\bf HDF5Matrix} containers from the
            \Biocpkg{HDF5Array} package: provide access to the HDF5 dataset
            via an API that mimics as much as possible the standard
            R matrix/array API 
    \end{itemize}
  \end{block}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Memory footprint}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]
  {\bf The "airway" dataset}
  \begin{exampleblock}{}
{\scriptsize
<<>>=
library(airway)
data(airway)
m <- unname(assay(airway))
dim(m)
head(m, n=4)
tail(m, n=4)
sum(m != 0) / length(m)
typeof(m)
@
}
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile]
  \frametitle{{\bf dgCMatrix} vs {\bf RleMatrix} vs {\bf HDF5Atrix}}
  \begin{exampleblock}{}
<<>>=
library(pryr)  # for object_size()
object_size(m)

library(Matrix)
object_size(as(m, "dgCMatrix"))

library(DelayedArray)
object_size(as(m, "RleMatrix"))
object_size(as(t(m), "RleMatrix"))

library(HDF5Array)
object_size(as(m, "HDF5Matrix"))
@
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile]
  Some limitations of the sparse matrix implementation in the \Biocpkg{Matrix}
  package:
  \begin{block}{}
    \begin{itemize}
      \item Non-zero values always stored as double, the most memory consuming
            type.
      \item Number of non-zero values must be $< 2^31$.
      \item Limited to 2 dimensions: no support for arrays of arbitrary number
            of dimensions
    \end{itemize}
  \end{block}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Delayed operations}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]
  \begin{block}{}
  \end{block}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Block processing}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]
  \begin{block}{}
  \end{block}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{document}

